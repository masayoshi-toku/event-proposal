---
import ProposalDescription from './ProposalDescription.astro';

export interface Props {
  title: string;
  overview: string;
  uuid: string;
  voteCount?: number;
}

const { title, overview, uuid, voteCount = 0} = Astro.props;
---

<div class="proposal mb-2" data-uuid={uuid}>
  <!-- ヘッダー -->
  <div class="proposal-header flex items-center bg-gray-100 p-4">
    <p class="proposal-title mr-3">{title}</p>
    <p class="proposal-vote-count">
      <i class='bi vote-btn text-cyan-700 text-lg' aria-label="投票する"></i>
      {voteCount}
    </p>
  </div>
  <!-- 概要 -->
  {overview && <ProposalDescription description={overview}></ProposalDescription>}
</div>

<style lang="scss">
  .proposal {
    .proposal-header {
      // background-color: #FAFAFA;
      font-weight: bold;
      font-size: 16px;
      padding: 0.5rem 1rem;
    }
    .vote-btn {
      cursor: pointer;
    }
  }
</style>

<script>
  import { createClient } from '@supabase/supabase-js';
  import { newVote, isVoted } from '../storage';

  const supabase = createClient(import.meta.env.PUBLIC_SUPABASE_PROJECT_URL, import.meta.env.PUBLIC_SUPABASE_PUBLIC_KEY);
  const proposals = document.querySelectorAll('.proposal');

  proposals.forEach(proposal => {
    const proposalUuid = proposal.dataset.uuid;
    const voteBtn = proposal.querySelector('.vote-btn');

    // 投票済
    if(isVoted(proposalUuid)) {
      voteBtn?.classList.add('bi-hand-thumbs-up-fill');
    // 未投票
    }else{
      voteBtn?.classList.add('bi-hand-thumbs-up');
      voteBtn?.addEventListener('click', async () => {
        await supabase.from('votes').insert({ proposal_uuid: proposalUuid });
        newVote(proposalUuid);

        location.reload();
      });
    }
  });
</script>
